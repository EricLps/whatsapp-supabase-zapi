<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="SUPABASE_URL=&#10;SUPABASE_KEY=&#10;ZAPI_TOKEN=&#10;ZAPI_INSTANCE=&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Ignora o ambiente virtual&#10;.venv/&#10;&#10;# Ignora arquivos de cache do Python&#10;__pycache__/&#10;*.pyc&#10;&#10;# Ignora arquivos de configuração de ambiente&#10;.env&#10;.env.*&#10;&#10;# Ignora arquivos de log&#10;*.log&#10;&#10;# Ignora arquivos do sistema&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Ignora arquivos temporários&#10;*.swp&#10;*.tmp&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Zapbase: Envio automatizado de mensagens WhatsApp via Supabase e Z-API&#10;&#10;## Passos para configurar a tabela no Supabase&#10;1. Crie um projeto no Supabase.&#10;2. Crie uma tabela chamada `contatos` com os campos:&#10;   - `id` (integer, primary key)&#10;   - `nome_contato` (text)&#10;   - `numero` (text)&#10;&#10;## Variáveis de ambiente necessárias&#10;Crie um arquivo `.env` com as seguintes variáveis:&#10;- `SUPABASE_URL`: URL do seu projeto Supabase&#10;- `SUPABASE_KEY`: Chave API do Supabase&#10;- `ZAPI_TOKEN`: Token da API Z-API&#10;- `ZAPI_INSTANCE`: ID da instância Z-API&#10;&#10;## Instalação&#10;```bash&#10;pip install -r requirements.txt&#10;```&#10;&#10;## Execução&#10;```bash&#10;python main.py&#10;```&#10;&#10;## Observações&#10;- O projeto busca até 3 contatos no Supabase e envia mensagens personalizadas via Z-API.&#10;- Mensagem personalizada usando o campo `nome_contato`.&#10;- Tratamento de erros e logs simples incluídos.&#10;&#10;---&#10;&#10;Para dúvidas, consulte os comentários no código ou abra uma issue no repositório.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="updatedContent" value="import os&#10;import logging&#10;from dotenv import load_dotenv&#10;from supabase import create_client, Client&#10;import requests&#10;&#10;# Configuração simples de logs&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')&#10;&#10;# Carrega variáveis do .env&#10;load_dotenv()&#10;&#10;# Mensagem que será enviada (personalizável)&#10;MENSAGEM = &quot;Olá, {{nome}}! Esta é uma mensagem automática do sistema.&quot;&#10;&#10;def buscar_contatos():&#10;    &quot;&quot;&quot;Busca contatos no Supabase&quot;&quot;&quot;&#10;    try:&#10;        supabase_url = os.getenv(&quot;SUPABASE_URL&quot;)&#10;        supabase_key = os.getenv(&quot;SUPABASE_KEY&quot;)&#10;        &#10;        supabase = create_client(supabase_url, supabase_key)&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').limit(3).execute()&#10;        &#10;        contatos = response.data&#10;        logging.info(f&quot;Encontrados {len(contatos)} contatos no banco&quot;)&#10;        return contatos&#10;        &#10;    except Exception as e:&#10;        logging.error(f&quot;Erro ao buscar contatos: {e}&quot;)&#10;        return []&#10;&#10;def enviar_mensagem(numero, mensagem):&#10;    &quot;&quot;&quot;Envia mensagem via Z-API&quot;&quot;&quot;&#10;    try:&#10;        token = os.getenv('ZAPI_TOKEN')&#10;        instance = os.getenv('ZAPI_INSTANCE')&#10;        &#10;        url = f&quot;https://api.z-api.io/instances/{instance}/token/{token}/send-message&quot;&#10;        dados = {&quot;phone&quot;: numero, &quot;message&quot;: mensagem}&#10;        &#10;        resposta = requests.post(url, json=dados)&#10;        &#10;        if resposta.status_code == 200:&#10;            logging.info(f&quot;Mensagem enviada para {numero}&quot;)&#10;        else:&#10;            logging.error(f&quot;Falha ao enviar para {numero}: {resposta.text}&quot;)&#10;            &#10;    except Exception as e:&#10;        logging.error(f&quot;Erro ao enviar mensagem para {numero}: {e}&quot;)&#10;&#10;def main():&#10;    &quot;&quot;&quot;Função principal - busca contatos e envia mensagens&quot;&quot;&quot;&#10;    logging.info(&quot;Iniciando envio de mensagens...&quot;)&#10;    &#10;    contatos = buscar_contatos()&#10;    &#10;    if not contatos:&#10;        logging.warning(&quot;Nenhum contato encontrado!&quot;)&#10;        return&#10;    &#10;    for contato in contatos:&#10;        nome = contato.get('nome_completo', 'Amigo')&#10;        numero = contato.get('numero')&#10;        &#10;        if not numero:&#10;            logging.warning(f&quot;Contato '{nome}' sem número cadastrado&quot;)&#10;            continue&#10;            &#10;        mensagem_personalizada = MENSAGEM.replace(&quot;{{nome}}&quot;, nome)&#10;        logging.info(f&quot;Enviando para {nome} ({numero})&quot;)&#10;        enviar_mensagem(numero, mensagem_personalizada)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="updatedContent" value="supabase&#10;requests&#10;python-dotenv" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.py" />
              <option name="originalContent" value="import os&#10;import logging&#10;from dotenv import load_dotenv&#10;from services.contatos_service import buscar_contatos&#10;from services.mensagem_service import enviar_mensagem&#10;&#10;# Configuração simples de logs&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')&#10;&#10;# Carrega variáveis do .env da raiz do projeto&#10;env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')&#10;load_dotenv(dotenv_path=env_path)&#10;&#10;# Mensagem que será enviada (personalizável)&#10;MENSAGEM = &quot;Olá, {{nome}}! Esta é uma mensagem automática do sistema.&quot;&#10;&#10;def main():&#10;    # Função principal - busca contatos e envia mensagens&#10;    logging.info(&quot;Iniciando envio de mensagens...&quot;)&#10;&#10;    contatos = buscar_contatos()&#10;&#10;    if not contatos:&#10;        logging.warning(&quot;Nenhum contato encontrado!&quot;)&#10;        return&#10;&#10;    for contato in contatos:&#10;        nome = contato.get('nome_completo', 'Amigo')&#10;        numero = contato.get('numero')&#10;&#10;        if not numero:&#10;            logging.warning(f&quot;Contato '{nome}' sem número cadastrado&quot;)&#10;            continue&#10;&#10;        mensagem_personalizada = MENSAGEM.replace(&quot;{{nome}}&quot;, nome)&#10;        logging.info(f&quot;Enviando para {nome} ({numero})&quot;)&#10;        enviar_mensagem(numero, mensagem_personalizada)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()&#10;" />
              <option name="updatedContent" value="import os&#10;import logging&#10;from dotenv import load_dotenv&#10;from services.contatos_service import buscar_contatos&#10;from services.mensagem_service import enviar_mensagem&#10;&#10;# Configuração de logs: exibe data/hora e mensagem de forma simples&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')&#10;&#10;# Carrega as credenciais do arquivo .env localizado na raiz do projeto&#10;env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')&#10;load_dotenv(dotenv_path=env_path)&#10;&#10;# Template da mensagem que será personalizada com o nome de cada contato&#10;MENSAGEM = &quot;Olá, {{nome}}! Esta é uma mensagem automática do sistema.&quot;&#10;&#10;def main():&#10;    &quot;&quot;&quot;&#10;    Função principal do sistema:&#10;    1. Busca todos os contatos cadastrados no Supabase&#10;    2. Para cada contato, personaliza a mensagem com o nome&#10;    3. Envia a mensagem via WhatsApp usando Z-API&#10;    &quot;&quot;&quot;&#10;    logging.info(&quot; Iniciando sistema de envio de mensagens...&quot;)&#10;    &#10;    # Busca todos os contatos na tabela do Supabase&#10;    contatos = buscar_contatos()&#10;    &#10;    if not contatos:&#10;        logging.warning(&quot;⚠️ Nenhum contato encontrado na base de dados!&quot;)&#10;        return&#10;    &#10;    logging.info(f&quot; Preparando envio para {len(contatos)} contato(s)&quot;)&#10;    &#10;    # Processa cada contato individualmente&#10;    for contato in contatos:&#10;        nome = contato.get('nome_completo', 'Amigo')&#10;        numero = contato.get('numero')&#10;        &#10;        # Pula contatos sem número cadastrado&#10;        if not numero:&#10;            logging.warning(f&quot;⚠️ Contato '{nome}' não possui número - pulando...&quot;)&#10;            continue&#10;        &#10;        # Personaliza a mensagem substituindo {{nome}} pelo nome real&#10;        mensagem_personalizada = MENSAGEM.replace(&quot;{{nome}}&quot;, nome)&#10;        &#10;        # Registra o envio e chama a função de envio&#10;        logging.info(f&quot; Enviando para {nome} ({numero})&quot;)&#10;        enviar_mensagem(numero, mensagem_personalizada)&#10;    &#10;    logging.info(&quot;✅ Processo concluído!&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/__init__.py" />
              <option name="updatedContent" value="# Arquivos essenciais apenas" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/contatos_service.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/contatos_service.py" />
              <option name="originalContent" value="import os&#10;import logging&#10;from dotenv import load_dotenv&#10;from supabase import create_client, Client&#10;&#10;def buscar_contatos():&#10;    &quot;&quot;&quot;&#10;    Conecta ao Supabase e busca todos os contatos da tabela 'Zapbase'&#10;    &#10;    Returns:&#10;        list: Lista de dicionários com 'nome_completo' e 'numero' dos contatos&#10;        list: Lista vazia em caso de erro&#10;    &quot;&quot;&quot;&#10;    try:&#10;        supabase_url = os.getenv(&quot;SUPABASE_URL&quot;)&#10;        supabase_key = os.getenv(&quot;SUPABASE_KEY&quot;)&#10;&#10;        supabase = create_client(supabase_url, supabase_key)&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').execute()&#10;&#10;        contatos = response.data&#10;        logging.info(f&quot;Encontrados {len(contatos)} contatos no banco&quot;)&#10;        return contatos&#10;&#10;    except Exception as e:&#10;        logging.error(f&quot;Erro ao buscar contatos: {e}&quot;)&#10;        return []&#10;" />
              <option name="updatedContent" value="import os&#10;import logging&#10;from dotenv import load_dotenv&#10;from supabase import create_client, Client&#10;&#10;def buscar_contatos():&#10;    &quot;&quot;&quot;&#10;    Conecta ao Supabase e busca todos os contatos da tabela 'Zapbase'&#10;    &#10;    Returns:&#10;        list: Lista de dicionários com 'nome_completo' e 'numero' dos contatos&#10;        list: Lista vazia em caso de erro&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Obtém as credenciais do Supabase das variáveis de ambiente&#10;        supabase_url = os.getenv(&quot;SUPABASE_URL&quot;)&#10;        supabase_key = os.getenv(&quot;SUPABASE_KEY&quot;)&#10;        &#10;        # Cria conexão com o banco Supabase&#10;        supabase = create_client(supabase_url, supabase_key)&#10;        &#10;        # Busca TODOS os contatos (sem limite) com nome e número&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').execute()&#10;        &#10;        contatos = response.data&#10;        logging.info(f&quot; Encontrados {len(contatos)} contatos na base de dados&quot;)&#10;        return contatos&#10;        &#10;    except Exception as e:&#10;        logging.error(f&quot;❌ Erro ao conectar com Supabase: {e}&quot;)&#10;        logging.error(&quot; Verifique: URL, chave de API, nome da tabela e conexão com internet&quot;)&#10;        return []" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/mensagem_service.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/mensagem_service.py" />
              <option name="originalContent" value="import os&#10;import logging&#10;import requests&#10;&#10;def enviar_mensagem(numero, mensagem):&#10;    &quot;&quot;&quot;&#10;    Envia mensagem personalizada via WhatsApp usando Z-API&#10;    &#10;    Args:&#10;        numero (str): Número do WhatsApp (formato: 5511999999999)&#10;        mensagem (str): Texto da mensagem a ser enviada&#10;    &#10;    Returns:&#10;        None: Apenas registra logs do resultado da operação&#10;    &quot;&quot;&quot;&#10;    try:&#10;        token = os.getenv('ZAPI_TOKEN')&#10;        instance = os.getenv('ZAPI_INSTANCE')&#10;&#10;        url = f&quot;https://api.z-api.io/instances/{instance}/token/{token}/send-message&quot;&#10;        dados = {&quot;phone&quot;: numero, &quot;message&quot;: mensagem}&#10;&#10;        resposta = requests.post(url, json=dados)&#10;&#10;        if resposta.status_code == 200:&#10;            logging.info(f&quot;Mensagem enviada para {numero}&quot;)&#10;        else:&#10;            logging.error(f&quot;Falha ao enviar para {numero}: {resposta.text}&quot;)&#10;&#10;    except Exception as e:&#10;        logging.error(f&quot;Erro ao enviar mensagem para {numero}: {e}&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;import logging&#10;import requests&#10;&#10;def enviar_mensagem(numero, mensagem):&#10;    &quot;&quot;&quot;&#10;    Envia mensagem personalizada via WhatsApp usando Z-API&#10;    &#10;    Args:&#10;        numero (str): Número do WhatsApp (formato: 5511999999999)&#10;        mensagem (str): Texto da mensagem a ser enviada&#10;    &#10;    Returns:&#10;        None: Apenas registra logs do resultado da operação&#10;    &quot;&quot;&quot;&#10;    try:&#10;        # Obtém as credenciais da Z-API das variáveis de ambiente&#10;        token = os.getenv('ZAPI_TOKEN')&#10;        instance = os.getenv('ZAPI_INSTANCE')&#10;        &#10;        # Monta a URL da API com instância e token&#10;        url = f&quot;https://api.z-api.io/instances/{instance}/token/{token}/send-message&quot;&#10;        &#10;        # Prepara os dados da mensagem no formato esperado pela Z-API&#10;        dados = {&quot;phone&quot;: numero, &quot;message&quot;: mensagem}&#10;        &#10;        # Envia requisição POST para a Z-API&#10;        resposta = requests.post(url, json=dados)&#10;        &#10;        # Verifica se o envio foi bem-sucedido&#10;        if resposta.status_code == 200:&#10;            logging.info(f&quot;✅ Mensagem enviada com sucesso para {numero}&quot;)&#10;        else:&#10;            logging.error(f&quot;❌ Falha no envio para {numero}: {resposta.text}&quot;)&#10;            logging.error(&quot; Verifique: token, instância ativa e formato do número&quot;)&#10;            &#10;    except Exception as e:&#10;        logging.error(f&quot;❌ Erro inesperado ao enviar para {numero}: {e}&quot;)&#10;        logging.error(&quot; Verifique: conexão com internet e credenciais da Z-API&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/supabase_client.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/supabase_client.py" />
              <option name="originalContent" value="import os&#10;from supabase import create_client, Client&#10;from utils.logger import setup_logger&#10;&#10;# Instancia o logger centralizado&#10;logger = setup_logger(&quot;supabase_client&quot;)&#10;&#10;# Função para buscar contatos no Supabase&#10;# Busca até 3 contatos na tabela Zapbase e retorna uma lista de dicionários&#10;# Todos os erros são tratados e logados de forma amigável e precisa&#10;def buscar_contatos(supabase_url, supabase_key):&#10;    try:&#10;        supabase: Client = create_client(supabase_url, supabase_key)&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').limit(3).execute()&#10;        contatos = response.data&#10;        logger.info(f&quot;{len(contatos)} contatos encontrados no Supabase.&quot;)&#10;        return contatos&#10;    except Exception as e:&#10;        logger.error(f&quot;Erro ao buscar contatos no Supabase: {e}&quot;)&#10;        logger.error(&quot;Possíveis causas: tabela Zapbase não existe, colunas incorretas, credenciais inválidas ou conexão instável.&quot;)&#10;        return []&#10;&#10;" />
              <option name="updatedContent" value="import os&#10;from supabase import create_client, Client&#10;from utils.logger import setup_logger&#10;&#10;# Instancia o logger centralizado&#10;logger = setup_logger(&quot;contatos_service&quot;)&#10;&#10;# Função para buscar contatos no Supabase&#10;# Busca até 3 contatos na tabela Zapbase e retorna uma lista de dicionários&#10;# Todos os erros são tratados e logados de forma amigável e precisa&#10;def buscar_contatos(supabase_url, supabase_key):&#10;    try:&#10;        supabase: Client = create_client(supabase_url, supabase_key)&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').limit(3).execute()&#10;        contatos = response.data&#10;        logger.info(f&quot;{len(contatos)} contatos encontrados no Supabase.&quot;)&#10;        return contatos&#10;    except Exception as e:&#10;        logger.error(f&quot;Erro ao buscar contatos no Supabase: {e}&quot;)&#10;        logger.error(&quot;Possíveis causas: tabela Zapbase não existe, colunas incorretas, credenciais inválidas ou conexão instável.&quot;)&#10;        return []" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/zapi_client.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/zapi_client.py" />
              <option name="updatedContent" value="import os&#10;import requests&#10;from utils.logger import setup_logger&#10;&#10;# Instancia o logger centralizado&#10;logger = setup_logger(&quot;zapi_client&quot;)&#10;&#10;# Função para enviar mensagem via Z-API&#10;# Recebe o número do contato e a mensagem personalizada&#10;# Todos os erros são tratados e logados de forma amigável e precisa&#10;def enviar_mensagem(numero, mensagem):&#10;    ZAPI_TOKEN = os.getenv('ZAPI_TOKEN')&#10;    ZAPI_INSTANCE = os.getenv('ZAPI_INSTANCE')&#10;    url = f&quot;https://api.z-api.io/instances/{ZAPI_INSTANCE}/token/{ZAPI_TOKEN}/send-message&quot;&#10;    payload = {&#10;        &quot;phone&quot;: numero,&#10;        &quot;message&quot;: mensagem&#10;    }&#10;    try:&#10;        r = requests.post(url, json=payload)&#10;        if r.status_code == 200:&#10;            logger.info(f&quot;Mensagem enviada com sucesso para o número {numero}!&quot;)&#10;        elif r.status_code == 401:&#10;            logger.error(f&quot;Token inválido ou instância não autorizada para o número {numero}. Resposta da API: {r.text}&quot;)&#10;        elif r.status_code == 400:&#10;            logger.error(f&quot;Requisição malformada para o número {numero}. Verifique o formato do número e da mensagem. Resposta da API: {r.text}&quot;)&#10;        else:&#10;            logger.error(f&quot;Falha ao enviar mensagem para {numero}. Resposta da API: {r.text}&quot;)&#10;            logger.error(&quot;Verifique se o número está correto, se a instância está ativa e se o token é válido.&quot;)&#10;    except requests.exceptions.RequestException as e:&#10;        logger.error(f&quot;Erro de conexão ao tentar enviar mensagem para {numero}: {e}&quot;)&#10;        logger.error(&quot;Verifique sua conexão com a internet e as credenciais da Z-API.&quot;)&#10;    except Exception as e:&#10;        logger.error(f&quot;Erro inesperado ao tentar enviar mensagem para {numero}: {e}&quot;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/supabase_client.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/supabase_client.py" />
              <option name="originalContent" value="import os&#10;from supabase import create_client, Client&#10;import logging&#10;&#10;# Função para buscar contatos no Supabase&#10;# Busca até 3 contatos na tabela Zapbase e retorna uma lista de dicionários&#10;# Todos os erros são tratados e logados de forma amigável&#10;def buscar_contatos(supabase_url, supabase_key):&#10;    try:&#10;        supabase: Client = create_client(supabase_url, supabase_key)&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').limit(3).execute()&#10;        contatos = response.data&#10;        logging.info(f&quot;{len(contatos)} contatos encontrados no Supabase.&quot;)&#10;        return contatos&#10;    except Exception as e:&#10;        logging.error(f&quot;Erro ao buscar contatos no Supabase: {e}&quot;)&#10;        logging.error(&quot;Verifique se a tabela Zapbase existe, se as colunas estão corretas e se as credenciais estão válidas.&quot;)&#10;        return []&#10;" />
              <option name="updatedContent" value="import os&#13;&#10;from supabase import create_client, Client&#13;&#10;from utils.logger import setup_logger&#13;&#10;&#13;&#10;# Instancia o logger centralizado&#13;&#10;logger = setup_logger(&quot;supabase_client&quot;)&#13;&#10;&#13;&#10;# Função para buscar contatos no Supabase&#13;&#10;# Busca até 3 contatos na tabela Zapbase e retorna uma lista de dicionários&#13;&#10;# Todos os erros são tratados e logados de forma amigável e precisa&#13;&#10;def buscar_contatos(supabase_url, supabase_key):&#13;&#10;    try:&#13;&#10;        supabase: Client = create_client(supabase_url, supabase_key)&#13;&#10;        response = supabase.table('Zapbase').select('nome_completo,numero').limit(3).execute()&#13;&#10;        contatos = response.data&#13;&#10;        logger.info(f&quot;{len(contatos)} contatos encontrados no Supabase.&quot;)&#13;&#10;        return contatos&#13;&#10;    except Exception as e:&#13;&#10;        logger.error(f&quot;Erro ao buscar contatos no Supabase: {e}&quot;)&#13;&#10;        logger.error(&quot;Possíveis causas: tabela Zapbase não existe, colunas incorretas, credenciais inválidas ou conexão instável.&quot;)&#13;&#10;        return []" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/logger.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/logger.py" />
              <option name="updatedContent" value="import logging&#10;import sys&#10;&#10;# Configuração centralizada de logs para o projeto&#10;# Permite logs simples, precisos e fáceis de entender&#10;# Todos os módulos devem importar este logger para manter padrão&#10;&#10;def setup_logger(name: str = &quot;zapbase&quot;):&#10;    logger = logging.getLogger(name)&#10;    logger.setLevel(logging.INFO)&#10;    handler = logging.StreamHandler(sys.stdout)&#10;    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')&#10;    handler.setFormatter(formatter)&#10;    if not logger.hasHandlers():&#10;        logger.addHandler(handler)&#10;    return logger&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/zapi_client.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/zapi_client.py" />
              <option name="originalContent" value="import os&#10;import requests&#10;import logging&#10;&#10;# Função para enviar mensagem via Z-API&#10;# Recebe o número do contato e a mensagem personalizada&#10;# Todos os erros são tratados e logados de forma amigável&#10;def enviar_mensagem(numero, mensagem):&#10;    # Recupera as credenciais da Z-API do ambiente&#10;    ZAPI_TOKEN = os.getenv('ZAPI_TOKEN')&#10;    ZAPI_INSTANCE = os.getenv('ZAPI_INSTANCE')&#10;    url = f&quot;https://api.z-api.io/instances/{ZAPI_INSTANCE}/token/{ZAPI_TOKEN}/send-message&quot;&#10;    payload = {&#10;        &quot;phone&quot;: numero,&#10;        &quot;message&quot;: mensagem&#10;    }&#10;    try:&#10;        r = requests.post(url, json=payload)&#10;        if r.status_code == 200:&#10;            logging.info(f&quot;Mensagem enviada com sucesso para o número {numero}!&quot;)&#10;        else:&#10;            logging.error(f&quot;Falha ao enviar mensagem para {numero}. Resposta da API: {r.text}&quot;)&#10;            logging.error(&quot;Verifique se o número está correto, se a instância está ativa e se o token é válido.&quot;)&#10;    except Exception as e:&#10;        logging.error(f&quot;Erro inesperado ao tentar enviar mensagem para {numero}: {e}&quot;)&#10;        logging.error(&quot;Verifique sua conexão com a internet e as credenciais da Z-API.&quot;)&#10;" />
              <option name="updatedContent" value="import os&#13;&#10;import requests&#13;&#10;from utils.logger import setup_logger&#13;&#10;&#13;&#10;# Instancia o logger centralizado&#13;&#10;logger = setup_logger(&quot;zapi_client&quot;)&#13;&#10;&#13;&#10;# Função para enviar mensagem via Z-API&#13;&#10;# Recebe o número do contato e a mensagem personalizada&#13;&#10;# Todos os erros são tratados e logados de forma amigável e precisa&#13;&#10;def enviar_mensagem(numero, mensagem):&#13;&#10;    ZAPI_TOKEN = os.getenv('ZAPI_TOKEN')&#13;&#10;    ZAPI_INSTANCE = os.getenv('ZAPI_INSTANCE')&#13;&#10;    url = f&quot;https://api.z-api.io/instances/{ZAPI_INSTANCE}/token/{ZAPI_TOKEN}/send-message&quot;&#13;&#10;    payload = {&#13;&#10;        &quot;phone&quot;: numero,&#13;&#10;        &quot;message&quot;: mensagem&#13;&#10;    }&#13;&#10;    try:&#13;&#10;        r = requests.post(url, json=payload)&#13;&#10;        if r.status_code == 200:&#13;&#10;            logger.info(f&quot;Mensagem enviada com sucesso para o número {numero}!&quot;)&#13;&#10;        elif r.status_code == 401:&#13;&#10;            logger.error(f&quot;Token inválido ou instância não autorizada para o número {numero}. Resposta da API: {r.text}&quot;)&#13;&#10;        elif r.status_code == 400:&#13;&#10;            logger.error(f&quot;Requisição malformada para o número {numero}. Verifique o formato do número e da mensagem. Resposta da API: {r.text}&quot;)&#13;&#10;        else:&#13;&#10;            logger.error(f&quot;Falha ao enviar mensagem para {numero}. Resposta da API: {r.text}&quot;)&#13;&#10;            logger.error(&quot;Verifique se o número está correto, se a instância está ativa e se o token é válido.&quot;)&#13;&#10;    except requests.exceptions.RequestException as e:&#13;&#10;        logger.error(f&quot;Erro de conexão ao tentar enviar mensagem para {numero}: {e}&quot;)&#13;&#10;        logger.error(&quot;Verifique sua conexão com a internet e as credenciais da Z-API.&quot;)&#13;&#10;    except Exception as e:&#13;&#10;        logger.error(f&quot;Erro inesperado ao tentar enviar mensagem para {numero}: {e}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>